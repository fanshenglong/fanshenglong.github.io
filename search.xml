<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>comment</title>
      <link href="/post/9474526c.html"/>
      <url>/post/9474526c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello wolrd!</title>
      <link href="/post/a5ca6cbb.html"/>
      <url>/post/a5ca6cbb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-异常</title>
      <link href="/post/5dd001c7.html"/>
      <url>/post/5dd001c7.html</url>
      
        <content type="html"><![CDATA[<h3 id="Java-异常类层次结构"><a href="#Java-异常类层次结构" class="headerlink" title="Java 异常类层次结构?"></a>Java 异常类层次结构?</h3><blockquote><p>转载于：<a href="https://www.pdai.tech/md/interview/x-interview.html#13-%E6%B3%A8%E8%A7%A3">https://www.pdai.tech/md/interview/x-interview.html#13-%E6%B3%A8%E8%A7%A3</a><br>著作权归<a href="https://pdai.tech所有./">https://pdai.tech所有。</a> 链接：<a href="https://www.pdai.tech/md/interview/x-interview.html">https://www.pdai.tech/md/interview/x-interview.html</a></p></blockquote><span id="more"></span><h4 id="Throwable-是-Java-语言中所有错误与异常的超类。"><a href="#Throwable-是-Java-语言中所有错误与异常的超类。" class="headerlink" title="Throwable 是 Java 语言中所有错误与异常的超类。"></a>Throwable 是 Java 语言中所有错误与异常的超类。</h4><ul><li><strong>Error</strong> 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。</li><li><strong>Exception</strong> 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。</li></ul><p><img src="http://oss.fansl.com.cn/image/blog/yuque/Fn877JJx64ZXLPR7eN30HeMhvzyJ.png"></p><h4 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h4><p>都是<code>RuntimeException</code>类及其子类异常，如<code>NullPointerException</code>(空指针异常)、<code>IndexOutOfBoundsException</code>(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。<br>运行时异常的特点是 Java 编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用 try-catch 语句捕获它，也没有用<code>throws</code>子句声明抛出它，也会编译通过。</p><h4 id="非运行时异常-（编译异常）"><a href="#非运行时异常-（编译异常）" class="headerlink" title="非运行时异常 （编译异常）"></a>非运行时异常 （编译异常）</h4><p>是<code>RuntimeException</code>以外的异常，类型上都属于<code>Exception</code>类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如<code>IOException</code>、<code>SQLException</code>等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。</p><h3 id="可查的异常（checked-exceptions）和不可查的异常（unchecked-exceptions）区别？"><a href="#可查的异常（checked-exceptions）和不可查的异常（unchecked-exceptions）区别？" class="headerlink" title="可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？"></a>可查的异常（<code>checked exceptions</code>）和不可查的异常（<code>unchecked exceptions</code>）区别？</h3><h4 id="可查异常（编译器要求必须处置的异常）："><a href="#可查异常（编译器要求必须处置的异常）：" class="headerlink" title="可查异常（编译器要求必须处置的异常）："></a>可查异常（编译器要求必须处置的异常）：</h4><p>正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。<br>除了<code>RuntimeException</code>及其子类以外，其他的<code>Exception</code>类及其子类都属于可查异常。这种异常的特点是 Java 编译器会检查它，也就是说，当程序中可能出现这类异常，要么用<code>try-catch</code>语句捕获它，要么用<code>throws</code>子句声明抛出它，否则编译不会通过。</p><h4 id="不可查异常-编译器不要求强制处置的异常"><a href="#不可查异常-编译器不要求强制处置的异常" class="headerlink" title="不可查异常(编译器不要求强制处置的异常)"></a>不可查异常(编译器不要求强制处置的异常)</h4><p>包括运行时异常（<code>RuntimeException</code>与其子类）和错误（<code>Error</code>）。</p><h3 id="throw和throws的区别？"><a href="#throw和throws的区别？" class="headerlink" title="throw和throws的区别？"></a><code>throw</code>和<code>throws</code>的区别？</h3><h4 id="异常的申明-throws"><a href="#异常的申明-throws" class="headerlink" title="异常的申明(throws)"></a>异常的申明(<code>throws</code>)</h4><p>在 Java 中，当前执行的语句必属于某个方法，Java 解释器调用<code>main</code>方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字<code>throws</code>，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FileNotFoundException&#123;</span><br><span class="line">    <span class="comment">//something statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="异常的抛出-throw"><a href="#异常的抛出-throw" class="headerlink" title="异常的抛出(throw)"></a>异常的抛出(<code>throw</code>)</h4><p>如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;参数不能为0&quot;</span>); <span class="comment">//抛出一个运行时异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5.0</span> / value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java-7-的-try-with-resource"><a href="#Java-7-的-try-with-resource" class="headerlink" title="Java 7 的 try-with-resource?"></a>Java 7 的 <code>try-with-resource</code>?</h3><p>如果你的资源实现了 <code>AutoCloseable</code> 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。</p><h3 id="异常的底层？"><a href="#异常的底层？" class="headerlink" title="异常的底层？"></a>异常的底层？</h3><p>提到 JVM 处理异常的机制，就需要提及 Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleTryCatch</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       testNPE();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 javap 来分析这段代码（需要先使用 javac 编译）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javap -c Main</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleTryCatch</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: invokestatic  #<span class="number">3</span>                  <span class="comment">// Method testNPE:()V</span></span><br><span class="line">       <span class="number">3</span>: goto          <span class="number">11</span></span><br><span class="line">       <span class="number">6</span>: astore_0</span><br><span class="line">       <span class="number">7</span>: aload_0</span><br><span class="line">       <span class="number">8</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/lang/Exception.printStackTrace:()V</span></span><br><span class="line">      <span class="number">11</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">0</span>     <span class="number">3</span>     <span class="number">6</span>   Class java/lang/Exception</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到上面的代码，应该会有会心一笑，因为终于看到了 Exception table，也就是我们要研究的异常表。</p><blockquote><p>异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下</p><ul><li><strong>from</strong> 可能发生异常的起始点</li><li><strong>to</strong> 可能发生异常的结束点</li><li><strong>target</strong> 上述 from 和 to 之前发生异常后的异常处理者的位置</li><li><strong>type</strong> 异常处理者处理的异常的类信息</li></ul></blockquote><hr><p>转载面试</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-注解</title>
      <link href="/post/d97cffc3.html"/>
      <url>/post/d97cffc3.html</url>
      
        <content type="html"><![CDATA[<h3 id="注解的作用？"><a href="#注解的作用？" class="headerlink" title="注解的作用？"></a>注解的作用？</h3><blockquote><p>转载于：<a href="https://www.pdai.tech/md/interview/x-interview.html#13-%E6%B3%A8%E8%A7%A3">https://www.pdai.tech/md/interview/x-interview.html#13-%E6%B3%A8%E8%A7%A3</a><br>著作权归<a href="https://pdai.tech所有./">https://pdai.tech所有。</a> 链接：<a href="https://www.pdai.tech/md/interview/x-interview.html">https://www.pdai.tech/md/interview/x-interview.html</a></p></blockquote><span id="more"></span><p>注解是 JDK1.5 版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：</p><ul><li>生成文档，通过代码里标识的元数据生成 javadoc 文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><h3 id="注解的常见分类？"><a href="#注解的常见分类？" class="headerlink" title="注解的常见分类？"></a>注解的常见分类？</h3><h4 id="Java-自带的标准注解"><a href="#Java-自带的标准注解" class="headerlink" title="Java 自带的标准注解"></a>Java 自带的标准注解</h4><blockquote><p>包括<code>@Override</code>、<code>@Deprecated</code>和<code>@SuppressWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</p></blockquote><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><blockquote><p>元注解是用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code></p><ul><li><code>@Retention</code>用于标明注解被保留的阶段</li><li><code>@Target</code>用于标明注解使用的范围</li><li><code>@Inherited</code>用于标明注解可继承</li><li><code>@Documented</code>用于标明是否生成 javadoc 文档</li></ul></blockquote><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote><p>可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</p></blockquote><hr><p>转载面试</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-泛型</title>
      <link href="/post/80b1e9f.html"/>
      <url>/post/80b1e9f.html</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要泛型？"><a href="#为什么需要泛型？" class="headerlink" title="为什么需要泛型？"></a>为什么需要泛型？</h3><blockquote><p>转载于：<a href="https://www.pdai.tech/md/interview/x-interview.html#12-%E6%B3%9B%E5%9E%8B">https://www.pdai.tech/md/interview/x-interview.html#12-%E6%B3%9B%E5%9E%8B</a><br>著作权归<a href="https://pdai.tech所有./">https://pdai.tech所有。</a> 链接：<a href="https://www.pdai.tech/md/interview/x-interview.html">https://www.pdai.tech/md/interview/x-interview.html</a></p></blockquote><span id="more"></span><h4 id="1-适用于多种数据类型执行相同的代码"><a href="#1-适用于多种数据类型执行相同的代码" class="headerlink" title="1.适用于多种数据类型执行相同的代码"></a>1.适用于多种数据类型执行相同的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">add</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个 add 方法；通过泛型，我们可以复用为一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="type">double</span> <span class="title function_">add</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">    <span class="keyword">return</span> a.doubleValue() + b.doubleValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）"><a href="#2-泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）" class="headerlink" title="2.泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）"></a>2.泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）</h4><p>看下这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;xxString&quot;</span>);</span><br><span class="line">list.add(<span class="number">100d</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在使用上述 list 中，list 中的元素都是 Object 类型（无法约束其中的类型），所以在取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现 java.lang.ClassCastException 异常。<br>引入泛型，它将提供类型的约束，提供编译前的检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// list中只能放String, 不能放其它类型的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型类如何定义使用？"><a href="#泛型类如何定义使用？" class="headerlink" title="泛型类如何定义使用？"></a>泛型类如何定义使用？</h3><h4 id="从一个简单的泛型类看起："><a href="#从一个简单的泛型类看起：" class="headerlink" title="从一个简单的泛型类看起："></a>从一个简单的泛型类看起：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&lt;T&gt;&#123;         <span class="comment">// 此处可以随便写标识符号，T是type的简称</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;     <span class="comment">// var的类型由T指定，即：由外部指定</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;  <span class="comment">// 返回值的类型由外部决定</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;  <span class="comment">// 设置的类型也由外部决定</span></span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo06</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Point&lt;String&gt; p = <span class="keyword">new</span> <span class="title class_">Point</span>&lt;String&gt;() ;     <span class="comment">// 里面的var类型为String类型</span></span><br><span class="line">        p.setVar(<span class="string">&quot;it&quot;</span>) ;                            <span class="comment">// 设置字符串</span></span><br><span class="line">        System.out.println(p.getVar().length()) ;   <span class="comment">// 取得字符串的长度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多元泛型"><a href="#多元泛型" class="headerlink" title="多元泛型"></a>多元泛型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Notepad</span>&lt;K,V&gt;&#123;       <span class="comment">// 此处指定了两个泛型类型</span></span><br><span class="line">    <span class="keyword">private</span> K key ;     <span class="comment">// 此变量的类型由外部决定</span></span><br><span class="line">    <span class="keyword">private</span> V value ;   <span class="comment">// 此变量的类型由外部决定</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.key ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(K key)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(V value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo09</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Notepad&lt;String,Integer&gt; t = <span class="literal">null</span> ;        <span class="comment">// 定义两个泛型类型的对象</span></span><br><span class="line">        t = <span class="keyword">new</span> <span class="title class_">Notepad</span>&lt;String,Integer&gt;() ;       <span class="comment">// 里面的key为String，value为Integer</span></span><br><span class="line">        t.setKey(<span class="string">&quot;汤姆&quot;</span>) ;        <span class="comment">// 设置第一个内容</span></span><br><span class="line">        t.setValue(<span class="number">20</span>) ;            <span class="comment">// 设置第二个内容</span></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名；&quot;</span> + t.getKey()) ;      <span class="comment">// 取得信息</span></span><br><span class="line">        System.out.print(<span class="string">&quot;，年龄；&quot;</span> + t.getValue()) ;       <span class="comment">// 取得信息</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型接口如何定义使用？"><a href="#泛型接口如何定义使用？" class="headerlink" title="泛型接口如何定义使用？"></a>泛型接口如何定义使用？</h3><h4 id="简单的泛型接口"><a href="#简单的泛型接口" class="headerlink" title="简单的泛型接口"></a>简单的泛型接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;        <span class="comment">// 在接口上定义泛型</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span> ; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;T&gt;&#123;   <span class="comment">// 定义泛型接口的子类</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;             <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;     <span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;</span><br><span class="line">        Info&lt;String&gt; i = <span class="literal">null</span>;        <span class="comment">// 声明接口对象</span></span><br><span class="line">        i = <span class="keyword">new</span> <span class="title class_">InfoImpl</span>&lt;String&gt;(<span class="string">&quot;汤姆&quot;</span>) ;  <span class="comment">// 通过子类实例化对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;内容：&quot;</span> + i.getVar()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型方法如何定义使用？"><a href="#泛型方法如何定义使用？" class="headerlink" title="泛型方法如何定义使用？"></a>泛型方法如何定义使用？</h3><p>泛型方法，是在调用方法的时候指明泛型的具体类型</p><h4 id="定义泛型方法语法格式"><a href="#定义泛型方法语法格式" class="headerlink" title="定义泛型方法语法格式"></a>定义泛型方法语法格式</h4><p><img src="http://oss.fansl.com.cn/image/blog/yuque/Fr5rO1WdAnfdFIvGb1MbndXF7vOU.png"></p><h4 id="调用泛型方法语法格式"><a href="#调用泛型方法语法格式" class="headerlink" title="调用泛型方法语法格式"></a>调用泛型方法语法格式</h4><p><img src="http://oss.fansl.com.cn/image/blog/yuque/FmYqH5-ToeKmyYXAB8DuoEjUZcxs.png"></p><blockquote><p>说明一下，定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型<code>T</code>作为方法的返回值。<br><code>Class&lt;T&gt;</code>的作用就是指明泛型的具体类型，而<code>Class&lt;T&gt;</code>类型的变量 c，可以用来创建泛型类的对象。<br>为什么要用变量<code>c</code>来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去<code>new</code>一个对象，但可以利用变量<code>c</code>的<code>newInstance</code>方法去创建对象，也就是利用反射创建对象。<br>泛型方法要求的参数是<code>Class&lt;T&gt;</code>类型，而<code>Class.forName()</code>方法的返回值也是<code>Class&lt;T&gt;</code>，因此可以用<code>Class.forName()</code>作为参数。其中，<code>forName()</code>方法中的参数是何种类型，返回的<code>Class&lt;T&gt;</code>就是何种类型。在本例中，<code>forName()</code>方法中传入的是<code>User</code>类的完整路径，因此返回的是<code>Class&lt;User&gt;</code>类型的对象，因此调用泛型方法时，变量<code>c</code>的类型就是<code>Class&lt;User&gt;</code>，因此泛型方法中的泛型<code>T</code>就被指明为<code>User</code>，因此变量<code>obj</code>的类型为<code>User</code>。<br>当然，泛型方法不是仅仅可以有一个参数<code>Class&lt;T&gt;</code>，可以根据需要添加其他参数。<br><strong>为什么要使用泛型方法呢</strong>？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新<code>new</code>一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p></blockquote><h3 id="泛型的上限和下限？"><a href="#泛型的上限和下限？" class="headerlink" title="泛型的上限和下限？"></a>泛型的上限和下限？</h3><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p><h4 id="上限"><a href="#上限" class="headerlink" title="上限"></a>上限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Info</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;&#123;    <span class="comment">// 此处泛型只能是数字类型</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;        <span class="comment">// 定义泛型变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;    <span class="comment">// 直接打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span>.toString() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Info&lt;Integer&gt; i1 = <span class="keyword">new</span> <span class="title class_">Info</span>&lt;Integer&gt;() ;        <span class="comment">// 声明Integer的泛型对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="下限"><a href="#下限" class="headerlink" title="下限"></a>下限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Info</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;        <span class="comment">// 定义泛型变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;    <span class="comment">// 直接打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span>.toString() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo21</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Info&lt;String&gt; i1 = <span class="keyword">new</span> <span class="title class_">Info</span>&lt;String&gt;() ;        <span class="comment">// 声明String的泛型对象</span></span><br><span class="line">        Info&lt;Object&gt; i2 = <span class="keyword">new</span> <span class="title class_">Info</span>&lt;Object&gt;() ;        <span class="comment">// 声明Object的泛型对象</span></span><br><span class="line">        i1.setVar(<span class="string">&quot;hello&quot;</span>) ;</span><br><span class="line">        i2.setVar(<span class="keyword">new</span> <span class="title class_">Object</span>()) ;</span><br><span class="line">        fun(i1) ;</span><br><span class="line">        fun(i2) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Info&lt;? <span class="built_in">super</span> String&gt; temp)</span>&#123;    <span class="comment">// 只能接收String或Object类型的泛型，String类的父类只有Object类</span></span><br><span class="line">        System.out.print(temp + <span class="string">&quot;, &quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何理解-Java-中的泛型是伪泛型？"><a href="#如何理解-Java-中的泛型是伪泛型？" class="headerlink" title="如何理解 Java 中的泛型是伪泛型？"></a>如何理解 Java 中的泛型是伪泛型？</h3><p>泛型中类型擦除 Java 泛型这个特性是从 JDK 1.5 才开始加入的，因此为了兼容之前的版本，Java 泛型的实现采取了“伪泛型”的策略，即 Java 在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p><hr><p>转载面试</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-语法基础</title>
      <link href="/post/8e067d70.html"/>
      <url>/post/8e067d70.html</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象特性"><a href="#面向对象特性" class="headerlink" title="面向对象特性?"></a>面向对象特性?</h3><blockquote><p>转载于：<a href="https://www.pdai.tech/md/interview/x-interview.html#11-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80">https://www.pdai.tech/md/interview/x-interview.html#11-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80</a><br>著作权归<a href="https://pdai.tech所有./">https://pdai.tech所有。</a> 链接：<a href="https://www.pdai.tech/md/interview/x-interview.html">https://www.pdai.tech/md/interview/x-interview.html</a></p></blockquote><span id="more"></span><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。<br>优点:</p><ul><li>减少耦合: 可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。<br>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender == <span class="number">0</span> ? <span class="string">&quot;man&quot;</span> : <span class="string">&quot;woman&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">18</span> &lt;= age &amp;&amp; age &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot; is working very hard!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot; can&#x27;t work any more!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。<br>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。<br>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态分为编译时多态和运行时多态:</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件:</p><ul><li>继承</li><li>覆盖(重写)</li><li>向上转型</li></ul><p>下面的代码中，乐器类(Instrument)有两个子类: Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Instrument is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wind</span> <span class="keyword">extends</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Wind is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Percussion</span> <span class="keyword">extends</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Percussion is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Music</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Instrument&gt; instruments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        instruments.add(<span class="keyword">new</span> <span class="title class_">Wind</span>());</span><br><span class="line">        instruments.add(<span class="keyword">new</span> <span class="title class_">Percussion</span>());</span><br><span class="line">        <span class="keyword">for</span>(Instrument instrument : instruments) &#123;</span><br><span class="line">            instrument.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="a-a-b-与-a-b-的区别"><a href="#a-a-b-与-a-b-的区别" class="headerlink" title="a &#x3D; a + b 与 a +&#x3D; b 的区别"></a>a &#x3D; a + b 与 a +&#x3D; b 的区别</h4><p>+&#x3D; 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">b = a + b; <span class="comment">// error : cannot convert from int to byte</span></span><br><span class="line">b += a; <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p><h4 id="3-0-1-0-3-将会返回什么-true-还是-false"><a href="#3-0-1-0-3-将会返回什么-true-还是-false" class="headerlink" title="3*0.1 &#x3D;&#x3D; 0.3 将会返回什么? true 还是 false?"></a>3*0.1 &#x3D;&#x3D; 0.3 将会返回什么? true 还是 false?</h4><p>false，因为有些浮点数不能完全精确的表示出来。</p><h4 id="能在-Switch-中使用-String-吗"><a href="#能在-Switch-中使用-String-吗" class="headerlink" title="能在 Switch 中使用 String 吗?"></a>能在 Switch 中使用 String 吗?</h4><p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p><h4 id="对-equals-和-hashCode-的理解"><a href="#对-equals-和-hashCode-的理解" class="headerlink" title="对 equals()和 hashCode()的理解?"></a>对 equals()和 hashCode()的理解?</h4><ul><li><strong>为什么在重写 equals 方法的时候需要重写 hashCode 方法</strong>?</li></ul><p>因为有强制的规范指定需要同时重写 hashcode 与 equals 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p><ul><li><strong>有没有可能两个不相等的对象有相同的 hashcode</strong>?</li></ul><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的 hashcode 值，但是没有关于不相等对象的任何规定。</p><ul><li><strong>两个相同的对象会有不同的 hash code 吗</strong>?</li></ul><p>不能，根据 hash code 的规定，这是不可能的。</p><h4 id="final、finalize-和-finally-的不同之处"><a href="#final、finalize-和-finally-的不同之处" class="headerlink" title="final、finalize 和 finally 的不同之处?"></a>final、finalize 和 finally 的不同之处?</h4><ul><li>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。</li><li>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</li><li>finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li></ul><h4 id="String、StringBuffer-与-StringBuilder-的区别？"><a href="#String、StringBuffer-与-StringBuilder-的区别？" class="headerlink" title="String、StringBuffer 与 StringBuilder 的区别？"></a>String、StringBuffer 与 StringBuilder 的区别？</h4><p>第一点: 可变和适用范围。String 对象是不可变的，而 StringBuffer 和 StringBuilder 是可变字符序列。每次对 String 的操作相当于生成一个新的 String 对象，而对 StringBuffer 和 StringBuilder 的操作是对对象本身的操作，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用 String，因为频繁的生成对象将会对系统性能产生影响。<br>第二点: 线程安全。String 由于有 final 修饰，是 immutable 的，安全性是简单而纯粹的。StringBuilder 和 StringBuffer 的区别在于 StringBuilder 不保证同步，也就是说如果需要线程安全需要使用 StringBuffer，不需要同步的 StringBuilder 效率更高。</p><h4 id="接口与抽象类的区别？"><a href="#接口与抽象类的区别？" class="headerlink" title="接口与抽象类的区别？"></a>接口与抽象类的区别？</h4><ul><li>一个子类只能继承一个抽象类, 但能实现多个接口</li><li>抽象类可以有构造方法, 接口没有构造方法</li><li>抽象类可以有普通成员变量, 接口没有普通成员变量</li><li>抽象类和接口都可有静态成员变量, 抽象类中静态成员变量访问类型任意，接口只能 public static final(默认)</li><li>抽象类可以没有抽象方法, 抽象类可以有普通方法；接口在 JDK8 之前都是抽象方法，在 JDK8 可以有 default 方法，在 JDK9 中允许有私有普通方法</li><li>抽象类可以有静态方法；接口在 JDK8 之前不能有静态方法，在 JDK8 中可以有静态方法，且只能被接口类直接调用（不能被实现类的对象调用）</li><li>抽象类中的方法可以是 public、protected; 接口方法在 JDK8 之前只有 public abstract，在 JDK8 可以有 default 方法，在 JDK9 中允许有 private 方法</li></ul><h4 id="this-super-在构造方法中的区别？"><a href="#this-super-在构造方法中的区别？" class="headerlink" title="this() &amp; super()在构造方法中的区别？"></a>this() &amp; super()在构造方法中的区别？</h4><ul><li>调用 super()必须写在子类构造方法的第一行, 否则编译不通过</li><li>super 从子类调用父类构造, this 在同一类中调用其他构造均需要放在第一行</li><li>尽管可以用 this 调用一个构造器, 却不能调用 2 个</li><li>this 和 super 不能出现在同一个构造器中, 否则编译不通过</li><li>this()、super()都指的对象,不可以在 static 环境中使用</li><li>本质 this 指向本对象的指针。super 是一个关键字</li></ul><h4 id="Java-移位运算符？"><a href="#Java-移位运算符？" class="headerlink" title="Java 移位运算符？"></a>Java 移位运算符？</h4><p>java 中有三种移位运算符</p><ul><li><code>&lt;&lt;</code> :左移运算符,x &lt;&lt; 1,相当于 x 乘以 2(不溢出的情况下),低位补 0</li><li><code>&gt;&gt;</code> :带符号右移,x &gt;&gt; 1,相当于 x 除以 2,正数高位补 0,负数高位补 1</li><li><code>&gt;&gt;&gt;</code> :无符号右移,忽略符号位,空位都以 0 补齐</li></ul><hr><p>转载面试</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/post/8ebbbb0f.html"/>
      <url>/post/8ebbbb0f.html</url>
      
        <content type="html"><![CDATA[<p>一些有用的 linux 命令</p><span id="more"></span><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a <span class="comment"># 查看内核、操作系统、cpu信息</span></span><br><span class="line"><span class="built_in">head</span> -n 1 /etc/issue  <span class="comment"># 查看操作系统版本</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo     <span class="comment"># 查看cpu信息</span></span><br><span class="line">hostname              <span class="comment"># 查看计算机名</span></span><br><span class="line">lspci -tv<span class="comment"># 列出所有PCI设备（需要yum install pciutils）</span></span><br><span class="line">lsusb -tv  <span class="comment"># 列出所有USB设备</span></span><br><span class="line">lsmod                 <span class="comment"># 列出加载的内核模块</span></span><br><span class="line"><span class="built_in">env</span>                   <span class="comment"># 查看环境变量</span></span><br><span class="line">lspci | grep Ethernet <span class="comment"># 查看网卡型号</span></span><br></pre></td></tr></table></figure><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free -m                <span class="comment"># 查看内存使用量和交换区使用量</span></span><br><span class="line"><span class="built_in">df</span> -h                  <span class="comment"># 查看各分区使用情况</span></span><br><span class="line"><span class="built_in">du</span> -sh &lt;目录名&gt;         <span class="comment"># 查看指定目录的大小</span></span><br><span class="line">grep MemTotal /proc/meminfo   <span class="comment"># 查看内存总量</span></span><br><span class="line">grep MemFree /proc/meminfo    <span class="comment"># 查看空闲内存量</span></span><br><span class="line"><span class="built_in">uptime</span>                 <span class="comment"># 查看系统运行时间、用户数、负载</span></span><br><span class="line"><span class="built_in">cat</span> /proc/loadavg      <span class="comment"># 查看系统负载</span></span><br></pre></td></tr></table></figure><h3 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount | column -t      <span class="comment"># 查看挂接的分区状态</span></span><br><span class="line">fdisk -l               <span class="comment"># 查看所有分区</span></span><br><span class="line">swapon -s              <span class="comment"># 查看所有交换分区</span></span><br><span class="line">hdparm -i /dev/hda     <span class="comment"># 查看磁盘参数(仅适用于IDE设备)</span></span><br><span class="line">dmesg | grep IDE       <span class="comment"># 查看启动时IDE设备检测状况</span></span><br></pre></td></tr></table></figure><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ifconfig               <span class="comment"># 查看所有网络接口的属性</span></span><br><span class="line">iptables -L            <span class="comment"># 查看防火墙设置</span></span><br><span class="line">route -n               <span class="comment"># 查看路由表</span></span><br><span class="line">netstat -lntp          <span class="comment"># 查看所有监听端口</span></span><br><span class="line">netstat -antp          <span class="comment"># 查看所有已经建立的连接</span></span><br><span class="line">netstat -s             <span class="comment"># 查看网络统计信息</span></span><br></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef                 <span class="comment"># 查看所有进程</span></span><br><span class="line">top                    <span class="comment"># 实时显示进程状态</span></span><br></pre></td></tr></table></figure><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm -qa                <span class="comment"># 查看所有安装的软件包</span></span><br></pre></td></tr></table></figure><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list      <span class="comment"># 列出所有系统服务</span></span><br><span class="line">chkconfig --list | grep on    <span class="comment"># 列出所有启动的系统服务</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客第一期</title>
      <link href="/post/5f68a16c.html"/>
      <url>/post/5f68a16c.html</url>
      
        <content type="html"><![CDATA[<p>该博客模版案例来自  <a href="#">@蚂蚁金服体验技术部</a></p><span id="more"></span><h3 id="插入带链接的标题（ctrl-K）Best-Year-in-Music"><a href="#插入带链接的标题（ctrl-K）Best-Year-in-Music" class="headerlink" title="插入带链接的标题（ctrl+K）Best Year in Music"></a>插入带链接的标题（ctrl+K）<a href="https://pudding.cool/projects/music-history/">Best Year in Music</a></h3><p>这幅可视化作品展示了 1960 年以来，Billboard  历年榜单的前五名音乐的变化情况，效果呈现设计感十足，还可以在聆听音乐的同时回顾音乐的变迁史。<br><img src="http://oss.fansl.com.cn/image/blog/yuque/FrzcNxUZoiD9eCdHcHZAyE_qp5Bj.png"><br><em>插入图片，点击图片，设置图片大小</em><br>值得一提的是，作者正是大名鼎鼎的数据新闻站点  <a href="https://pudding.cool/">The Pudding</a>。作为可视化新闻媒体中的姣姣者，The Pudding 擅长对那些兼具信息量和娱乐度的争议性话题进行可视化呈现，来使得复杂的观点变得更容易被公众理解。该团队虽然仅由数名全职记者和工程师组成，但战斗力强悍，目前已有数十个大型的数据可视化作品。<br>输入作者  <a href="/dengfuping">@诸岳(dengfuping)</a></p><h3 id="Road-Suffixes-in-the-USA"><a href="#Road-Suffixes-in-the-USA" class="headerlink" title="Road Suffixes in the USA"></a><a href="https://erdavis.com/2019/07/04/road-suffixes-in-the-usa-take-2/">Road Suffixes in the USA</a></h3><p>美国道路命名多种多样，例如著名的纽约第五大道（Fifth Avenue），又或者凤凰城（Phoenix）的 Washington Street，Thomas Road，Union Hill Drive 等。不同的道路，有不同的叫法，Avenue, Street, Road, Drive 等等。想了解更多关于美国道路命名可以参考<a href="http://blog.sina.com.cn/s/blog_7010d1db0101he93.html">这篇文章</a>。<br>作者用 R 语言统计了美国每个县的每种道路后缀（例如 Avenue）的总里程，并把每个县总里程最大的道路后缀通过颜色映射到地图上。可以看出美国大部分县的道路都是以 Rd(Road 的缩写)结尾的。<br><img src="http://oss.fansl.com.cn/image/blog/yuque/Fv_qehDihKjyL4ZWAMZw5kWJKjci.png"><br><em>插入图片，点击图片，设置图片大小</em></p><p>另外还以柱状图的方式展示了每种道路后缀的总里程（英里）：<br><img src="http://oss.fansl.com.cn/image/blog/yuque/FiWw6Bw-7L7KD1GN4gE0MYkkOzIU.png"><br>by <a href="/changzhe">@长哲(changzhe)</a></p><h1 id="「加餐」Hello-World-图可视化"><a href="#「加餐」Hello-World-图可视化" class="headerlink" title="「加餐」Hello World 图可视化"></a><a href="https://zhuanlan.zhihu.com/p/83685690">「</a><a href="https://zhuanlan.zhihu.com/p/83685690">加餐」</a><a href="https://zhuanlan.zhihu.com/p/83685690">Hello World 图可视化</a></h1><p>图可视化是信息可视化的子领域，它通过展示元素、关系，帮助用户获取数据的洞悉能力。它已被广泛地应用在流程图、社交网络、英特网、蛋白质网络等关系数据的呈现。<br><a href="https://zhuanlan.zhihu.com/p/83685690">本文</a>由 AntV 团队  <a href="/shiwu-5wap2">@十吾(shiwu-5wap2)</a> 👆 撰写，参考自[1][2]两篇图可视化学术论文，简要介绍图可视化的历史、背景、机遇与挑战。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试一下font-formatter</title>
      <link href="/post/74f6bac4.html"/>
      <url>/post/74f6bac4.html</url>
      
        <content type="html"><![CDATA[<p>测试语雀 front-matter</p><span id="more"></span><p>没有内容了</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官问分布式技术面试题，一脸懵逼怎么办?</title>
      <link href="/post/4c9ea4ae.html"/>
      <url>/post/4c9ea4ae.html</url>
      
        <content type="html"><![CDATA[<p><strong>分布式缓存，分布式消息队列，分布式服务框架</strong><br>**</p><blockquote><p>转载于：<a href="https://my.oschina.net/u/3728792/blog/3042368">https://my.oschina.net/u/3728792/blog/3042368</a></p></blockquote><span id="more"></span><h2 id="1-分布式缓存"><a href="#1-分布式缓存" class="headerlink" title="1.分布式缓存"></a>1.分布式缓存</h2><h3 id="1-1-Redis-有什么数据类型？分别用于什么场景？"><a href="#1-1-Redis-有什么数据类型？分别用于什么场景？" class="headerlink" title="1.1 Redis 有什么数据类型？分别用于什么场景？"></a>1.1 Redis 有什么数据类型？分别用于什么场景？</h3><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th></tr></thead><tbody><tr><td>STRING</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作</td></tr><tr><td>对整数和浮点数执行自增或者自减操作</td><td></td><td></td></tr><tr><td>LIST</td><td>列表</td><td>从两端压入或者弹出元素</td></tr></tbody></table><p>读取单个或者多个元素<br>进行修剪，只保留一个范围内的元素 |<br>| SET | 无序集合 | 添加、获取、移除单个元素<br>检查一个元素是否存在于集合中<br>计算交集、并集、差集<br>从集合里面随机获取元素 |<br>| HASH | 包含键值对的无序散列表 | 添加、获取、移除单个键值对<br>获取所有键值对<br>检查某个键是否存在 |<br>| ZSET | 有序集合 | 添加、获取、删除元素<br>根据分值范围或者成员来获取元素<br>计算一个键的排名 |</p><blockquote><p>详细文档：<a href="https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/">https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/</a></p></blockquote><h3 id="1-2-Redis-的主从复制是如何实现的？"><a href="#1-2-Redis-的主从复制是如何实现的？" class="headerlink" title="1.2. Redis 的主从复制是如何实现的？"></a>1.2. Redis 的主从复制是如何实现的？</h3><ol><li>从服务器连接主服务器，发送 SYNC 命令；</li><li>主服务器接收到 SYNC 命名后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；</li><li>主服务器 BGSAVE 执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；</li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；</li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</li></ol><h3 id="1-3-Redis-的-key-是如何寻址的？"><a href="#1-3-Redis-的-key-是如何寻址的？" class="headerlink" title="1.3. Redis 的 key 是如何寻址的？"></a>1.3. Redis 的 key 是如何寻址的？</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>（1）redis 中的每一个数据库，都由一个 redisDb 的结构存储。其中：</p><ul><li>redisDb.id 存储着 redis 数据库以整数表示的号码。</li><li>redisDb.dict 存储着该库所有的键值对数据。</li><li>redisDb.expires 保存着每一个键的过期时间。</li></ul><p>（2）当 redis 服务器初始化时，会预先分配 16 个数据库（该数量可以通过配置文件配置），所有数据库保存到结构 redisServer<br>的一个成员 redisServer.db 数组中。当我们选择数据库 select number 时，程序直接通过<br>redisServer.db[number] 来切换数据库。有时候当程序需要知道自己是在哪个数据库时，直接读取 redisDb.id 即可。<br>（3）redis 的字典使用哈希表作为其底层实现。dict 类型使用的两个指向哈希表的指针，其中 0<br>号哈希表（ht[0]）主要用于存储数据库的所有键值，而 1 号哈希表主要用于程序对 0 号哈希表进行 rehash 时使用，rehash<br>一般是在添加新值时会触发，这里不做过多的赘述。所以 redis 中查找一个 key，其实就是对进行该 dict 结构中的 ht[0]<br>进行查找操作。<br>（4）既然是哈希，那么我们知道就会有哈希碰撞，那么当多个键哈希之后为同一个值怎么办呢？redis<br>采取链表的方式来存储多个哈希碰撞的键。也就是说，当根据 key 的哈希值找到该列表后，如果列表的长度大于<br>1，那么我们需要遍历该链表来找到我们所查找的 key。当然，一般情况下链表长度都为是 1，所以时间复杂度可看作 o(1)。</p></blockquote><h4 id="寻址-key-的步骤"><a href="#寻址-key-的步骤" class="headerlink" title="寻址 key 的步骤"></a>寻址 key 的步骤</h4><blockquote><ol><li>当拿到一个 key 后，redis 先判断当前库的 0 号哈希表是否为空，即：if (dict-&gt;ht[0].size &#x3D;&#x3D; 0)。如果为 true 直接返回 NULL。</li><li>判断该 0 号哈希表是否需要 rehash，因为如果在进行 rehash，那么两个表中者有可能存储该 key。如果正在进行<br>rehash，将调用一次_dictRehashStep 方法，_dictRehashStep 用于对数据库字典、以及哈希键的字典进行被动<br>rehash，这里不作赘述。</li><li>计算哈希表，根据当前字典与 key 进行哈希值的计算。</li><li>根据哈希值与当前字典计算哈希表的索引值。</li><li>根据索引值在哈希表中取出链表，遍历该链表找到 key 的位置。一般情况，该链表长度为 1。</li><li>当 ht[0] 查找完了之后，再进行了次 rehash 判断，如果未在 rehashing，则直接结束，否则对 ht[1]重复 345 步骤。</li></ol></blockquote><h3 id="1-4-Redis-的集群模式是如何实现的？"><a href="#1-4-Redis-的集群模式是如何实现的？" class="headerlink" title="1.4. Redis 的集群模式是如何实现的？"></a><strong>1.4. Redis 的集群模式是如何实现的？</strong></h3><blockquote><p>Redis Cluster 是 Redis 的分布式解决方案，在 Redis 3.0 版本正式推出的。<br>Redis Cluster 去中心化，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接。</p></blockquote><h4 id="Redis-Cluster-节点分配"><a href="#Redis-Cluster-节点分配" class="headerlink" title="Redis Cluster 节点分配"></a>Redis Cluster 节点分配</h4><blockquote><p>Redis Cluster 特点：</p><ol><li>所有的 redis 节点彼此互联(PING-PONG 机制)，内部使用二进制协议优化传输速度和带宽。</li><li>节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</li><li>客户端与 redis 节点直连,不需要中间 proxy 层。客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li><li>redis-cluster 把所有的物理节点映射到[0-16383] 哈希槽 (hash slot)上（不一定是平均分配）,cluster 负责维护 node、slot、value。</li><li>Redis 集群预分好 16384 个桶，当需要在 Redis 集群中放置一个 key-value 时，根据 CRC16(key) mod 16384 的值，决定将一个 key 放到哪个桶中。</li></ol></blockquote><h4 id="Redis-Cluster-主从模式"><a href="#Redis-Cluster-主从模式" class="headerlink" title="Redis Cluster 主从模式"></a>Redis Cluster 主从模式</h4><blockquote><p>Redis Cluster 为了保证数据的高可用性，加入了主从模式。<br>一个主节点对应一个或多个从节点，主节点提供数据存取，从节点则是从主节点拉取数据备份。当这个主节点挂掉后，就会有这个从节点选取一个来充当主节点，从而保证集群不会挂掉。所以，在集群建立的时候，一定要为每个主节点都添加了从节点。</p></blockquote><h4 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h4><blockquote><p>Redis Sentinel 用于管理多个 Redis 服务器，它有三个功能：</p><ul><li><strong>监控（Monitoring）</strong> - Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li><li><strong>提醒（Notification）</strong> - 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li><li><strong>自动故障迁移（Automatic failover）</strong> - 当一个主服务器不能正常工作时，<br>Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器，<br>并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址，<br>使得集群可以使用新主服务器代替失效服务器。</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Redis 集群中应该有奇数个节点，所以至少有三个节点。</span><br><span class="line">哨兵监控集群中的主服务器出现故障时，需要根据 quorum 选举出一个哨兵来执行故障转移。选举需要</span><br><span class="line">majority，即大多数哨兵是运行的（2 个哨兵的 majority=2，3 个哨兵的 majority=2，5 个哨兵的</span><br><span class="line">majority=3，4 个哨兵的 majority=2）。</span><br><span class="line">假设集群仅仅部署 2 个节点</span><br><span class="line">+----+         +----+</span><br><span class="line">| M1 |---------| R1 |</span><br><span class="line">| S1 |         | S2 |</span><br><span class="line">+----+         +----+</span><br><span class="line">如果 M1 和 S1 所在服务器宕机，则哨兵只有 1 个，无法满足 majority 来进行选举，就不能执行故障转移。</span><br></pre></td></tr></table></figure><h3 id="1-5-Redis-如何实现分布式锁？ZooKeeper-如何实现分布式锁？比较二者优劣？"><a href="#1-5-Redis-如何实现分布式锁？ZooKeeper-如何实现分布式锁？比较二者优劣？" class="headerlink" title="1.5. Redis 如何实现分布式锁？ZooKeeper 如何实现分布式锁？比较二者优劣？"></a>1.5. Redis 如何实现分布式锁？ZooKeeper 如何实现分布式锁？比较二者优劣？</h3><blockquote><p>分布式锁的三种实现：</p><ul><li>基于数据库实现分布式锁；</li><li>基于缓存（Redis 等）实现分布式锁；</li><li>基于 Zookeeper 实现分布式锁；</li></ul></blockquote><h4 id="数据库实现"><a href="#数据库实现" class="headerlink" title="数据库实现"></a>数据库实现</h4><h4 id="Redis-实现"><a href="#Redis-实现" class="headerlink" title="Redis 实现"></a><strong>Redis 实现</strong></h4><blockquote><ol><li>获取锁的时候，使用 setnx 加锁，并使用 expire 命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的 value 值为一个随机生成的 UUID，通过此在释放锁的时候进行判断。</li><li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li><li>释放锁的时候，通过 UUID 判断是不是该锁，若是该锁，则执行 delete 进行锁释放。</li></ol></blockquote><h4 id="ZooKeeper-实现"><a href="#ZooKeeper-实现" class="headerlink" title="ZooKeeper 实现"></a><strong>ZooKeeper 实现</strong></h4><blockquote><ol><li>创建一个目录 mylock；</li><li>线程 A 想获取锁就在 mylock 目录下创建临时顺序节点；</li><li>获取 mylock 目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；</li><li>线程 B 获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；</li><li>线程 A 处理完，删除自己的节点，线程 B 监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</li></ol></blockquote><h4 id="实现对比"><a href="#实现对比" class="headerlink" title="实现对比"></a>实现对比</h4><blockquote><p>ZooKeeper 具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。 但 ZooKeeper 因为需要频繁的创建和删除节点，性能上不如 Redis 方式。</p></blockquote><h3 id="1-6-Redis-的持久化方式？有什么优缺点？持久化实现原理？"><a href="#1-6-Redis-的持久化方式？有什么优缺点？持久化实现原理？" class="headerlink" title="1.6. Redis 的持久化方式？有什么优缺点？持久化实现原理？"></a><strong>1.6. Redis 的持久化方式？有什么优缺点？持久化实现原理？</strong></h3><h4 id="RDB-快照（snapshot）"><a href="#RDB-快照（snapshot）" class="headerlink" title="RDB 快照（snapshot）"></a>RDB 快照（snapshot）</h4><blockquote><p>将存在于某一时刻的所有数据都写入到硬盘中。<br>快照的原理<br>在默认情况下，Redis 将数据库快照保存在名字为 dump.rdb 的二进制文件中。你可以对 Redis 进行设置， 让它在“N<br>秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次数据集。你也可以通过调用 SAVE 或者 BGSAVE，手动让 Redis<br>进行数据集保存操作。这种持久化方式被称为快照。<br>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作:</p><ul><li>Redis 创建一个子进程。</li><li>子进程将数据集写入到一个临时快照文件中。</li><li>当子进程完成对新快照文件的写入时，Redis 用新快照文件替换原来的快照文件，并删除旧的快照文件。</li></ul><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。<br>快照的优点</p><ul><li>它保存了某个时间点的数据集，非常适用于数据集的备份。</li><li>很方便传送到另一个远端数据中心或者亚马逊的 S3（可能加密），非常适用于灾难恢复。</li><li>快照在保存 RDB 文件时父进程唯一需要做的就是 fork 出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他 IO 操作，所以快照持久化方式可以最大化 redis 的性能。</li><li>与 AOF 相比，在恢复大的数据集的时候，DB 方式会更快一些。</li></ul><p>快照的缺点</p><ul><li>如果你希望在 redis 意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么快照不适合你。</li><li>快照需要经常 fork 子进程来保存数据集到硬盘上。当数据集比较大的时候，fork 的过程是非常耗时的，可能会导致 Redis 在一些毫秒级内不能响应客户端的请求。</li></ul></blockquote><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><blockquote><p>AOF 持久化方式记录每次对服务器执行的写操作。当服务器重启的时候会重新执行这些命令来恢复原始的数据。</p></blockquote><h4 id="AOF-的原理"><a href="#AOF-的原理" class="headerlink" title="AOF 的原理"></a>AOF 的原理</h4><blockquote><ul><li>Redis 创建一个子进程。</li><li>子进程开始将新 AOF 文件的内容写入到临时文件。</li><li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾，这样样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li><li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li><li>搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li></ul></blockquote><h4 id="AOF-的优点"><a href="#AOF-的优点" class="headerlink" title="AOF 的优点"></a>AOF 的优点</h4><blockquote><ul><li>使用默认的每秒 fsync 策略，Redis 的性能依然很好(fsync 是由后台线程进行处理的,主线程会尽力处理客户端请求)，一旦出现故障，使用 AOF ，你最多丢失 1 秒的数据。</li><li>AOF 文件是一个只进行追加的日志文件，所以不需要写入 seek，即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令，你也也可使用 redis-check-aof 工具修复这些问题。</li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写：重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的。</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作，这些写入操作以 Redis 协议的格式保存。因此 AOF 文件的内容非常容易被人读懂，对文件进行分析（parse）也很轻松。</li></ul></blockquote><h4 id="AOF-的缺点"><a href="#AOF-的缺点" class="headerlink" title="AOF 的缺点"></a>AOF 的缺点</h4><blockquote><ul><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li><li>根据所使用的 fsync 策略，AOF 的速度可能会慢于快照。在一般情况下，每秒 fsync 的性能依然非常高，而关闭 fsync<br>可以让 AOF 的速度和快照一样快，即使在高负荷之下也是如此。不过在处理巨大的写入载入时，快照可以提供更有保证的最大延迟时间（latency）。</li></ul></blockquote><h3 id="1-7-Redis-过期策略有哪些？"><a href="#1-7-Redis-过期策略有哪些？" class="headerlink" title="1.7. Redis 过期策略有哪些？"></a>1.7. Redis 过期策略有哪些？</h3><blockquote><ul><li><strong>noeviction</strong> - 当内存使用达到阈值的时候，所有引起申请内存的命令会报错。</li><li><strong>allkeys-lru</strong> - 在主键空间中，优先移除最近未使用的 key。</li><li><strong>allkeys-random</strong> - 在主键空间中，随机移除某个 key。</li><li><strong>volatile-lru</strong> - 在设置了过期时间的键空间中，优先移除最近未使用的 key。</li><li><strong>volatile-random</strong> - 在设置了过期时间的键空间中，随机移除某个 key。</li><li><strong>volatile-ttl</strong> - 在设置了过期时间的键空间中，具有更早过期时间的 key 优先移除。</li></ul></blockquote><h3 id="1-8-Redis-和-Memcached-有什么区别？"><a href="#1-8-Redis-和-Memcached-有什么区别？" class="headerlink" title="1.8. Redis 和 Memcached 有什么区别？"></a>1.8. Redis 和 Memcached 有什么区别？</h3><blockquote><p>两者都是非关系型内存键值数据库。有以下主要不同：<br><strong>数据类型</strong></p><ul><li>Memcached 仅支持字符串类型；</li><li>而 Redis 支持五种不同种类的数据类型，使得它可以更灵活地解决问题。</li></ul><p><strong>数据持久化</strong></p><ul><li>Memcached 不支持持久化；</li><li>Redis 支持两种持久化策略：RDB 快照和 AOF 日志。</li></ul><p><strong>分布式</strong></p><ul><li>Memcached 不支持分布式，只能通过在客户端使用像一致性哈希这样的分布式算法来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</li><li>Redis Cluster 实现了分布式的支持。</li></ul><p><strong>内存管理机制</strong></p><ul><li>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题，但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</li><li>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘。而 Memcached 的数据则会一直在内存中。</li></ul></blockquote><h3 id="1-9-为什么单线程的-Redis-性能反而优于多线程的-Memcached？"><a href="#1-9-为什么单线程的-Redis-性能反而优于多线程的-Memcached？" class="headerlink" title="1.9. 为什么单线程的 Redis 性能反而优于多线程的 Memcached？"></a>1.9. 为什么单线程的 Redis 性能反而优于多线程的 Memcached？</h3><blockquote><p>Redis 快速的原因：</p><ol><li>绝大部分请求是纯粹的内存操作（非常快速）</li><li>采用单线程,避免了不必要的上下文切换和竞争条件</li><li>非阻塞 IO</li></ol><p>内部实现采用 epoll，采用了 epoll+自己实现的简单的事件框架。epoll 中的读、写、关闭、连接都转化成了事件，然后利用 epoll 的多路复用特性，绝不在 io 上浪费一点时间。</p></blockquote><h2 id="2-分布式消息队列（MQ）"><a href="#2-分布式消息队列（MQ）" class="headerlink" title="2. 分布式消息队列（MQ）"></a>2. 分布式消息队列（MQ）</h2><h3 id="2-1-为什么使用-MQ？"><a href="#2-1-为什么使用-MQ？" class="headerlink" title="2.1. 为什么使用 MQ？"></a>2.1. 为什么使用 MQ？</h3><blockquote><ul><li>异步处理 - 相比于传统的串行、并行方式，提高了系统吞吐量。</li><li>应用解耦 - 系统间通过消息通信，不用关心其他系统的处理。</li><li>流量削锋 - 可以通过消息队列长度控制请求量；可以缓解短时间内的高并发请求。</li><li>日志处理 - 解决大量日志传输。</li><li>消息通讯 - 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</li></ul></blockquote><h3 id="2-2-如何保证-MQ-的高可用？"><a href="#2-2-如何保证-MQ-的高可用？" class="headerlink" title="2.2. 如何保证 MQ 的高可用？"></a>2.2. 如何保证 MQ 的高可用？</h3><h4 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h4><blockquote><ol><li>将所有 Broker 和待分配的 Partition 排序</li><li>将第 i 个 Partition 分配到第（i mod n）个 Broker 上</li><li>将第 i 个 Partition 的第 j 个 Replica 分配到第（(i + j) mode n）个 Broker 上</li></ol></blockquote><h4 id="选举主服务器"><a href="#选举主服务器" class="headerlink" title="选举主服务器"></a>选举主服务器</h4><h3 id="2-3-MQ-有哪些常见问题？如何解决这些问题？"><a href="#2-3-MQ-有哪些常见问题？如何解决这些问题？" class="headerlink" title="2.3. MQ 有哪些常见问题？如何解决这些问题？"></a>2.3. MQ 有哪些常见问题？如何解决这些问题？</h3><blockquote><p>MQ 的常见问题有：</p><ol><li>消息的顺序问题</li><li>消息的重复问题</li></ol></blockquote><h4 id="消息的顺序问题"><a href="#消息的顺序问题" class="headerlink" title="消息的顺序问题"></a>消息的顺序问题</h4><blockquote><p>消息有序指的是可以按照消息的发送顺序来消费。<br>假如生产者产生了 2 条消息：M1、M2，假定 M1 发送到 S1，M2 发送到 S2，如果要保证 M1 先于 M2 被消费，怎么做？</p></blockquote><p><img src="http://oss.fansl.com.cn/image/blog/yuque/FtfxDDV8S2w6rW4urheqTKQkz7N0.jpeg"></p><blockquote><p>解决方案：<br>（1）保证生产者 - MQServer - 消费者是一对一对一的关系</p></blockquote><p><img src="http://oss.fansl.com.cn/image/blog/yuque/FpGRix4IzJoIaYdCKbsQexMBJEod.jpeg"></p><blockquote><p>缺陷：</p><ul><li>并行度就会成为消息系统的瓶颈（吞吐量不够）</li><li>更多的异常处理，比如：只要消费端出现问题，就会导致整个处理流程阻塞，我们不得不花费更多的精力来解决阻塞的问题。</li></ul><p>（2）通过合理的设计或者将问题分解来规避。</p><ul><li>不关注乱序的应用实际大量存在</li><li>队列无序并不意味着消息无序</li></ul><p>所以从业务层面来保证消息的顺序而不仅仅是依赖于消息系统，是一种更合理的方式。</p></blockquote><h4 id="消息的重复问题"><a href="#消息的重复问题" class="headerlink" title="消息的重复问题"></a><strong>消息的重复问题</strong></h4><blockquote><p>造成消息重复的根本原因是：网络不可达。<br>所以解决这个问题的办法就是绕过这个问题。那么问题就变成了：如果消费端收到两条一样的消息，应该怎样处理？<br>消费端处理消息的业务逻辑保持幂等性。只要保持幂等性，不管来多少条重复消息，最后处理的结果都一样。<br>保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现。利用一张日志表来记录已经处理成功的消息的 ID，如果新到的消息 ID<br>已经在日志表中，那么就不再处理这条消息。</p></blockquote><h3 id="2-4-Kafka-ActiveMQ-RabbitMQ-RocketMQ-各有什么优缺点？"><a href="#2-4-Kafka-ActiveMQ-RabbitMQ-RocketMQ-各有什么优缺点？" class="headerlink" title="2.4. Kafka, ActiveMQ, RabbitMQ, RocketMQ 各有什么优缺点？"></a>2.4. Kafka, ActiveMQ, RabbitMQ, RocketMQ 各有什么优缺点？</h3><p><img src="http://oss.fansl.com.cn/image/blog/yuque/Ft6LZgMbnq_yvRM7Qnw-V8_9oVlZ.jpeg"></p><h2 id="3-分布式服务（RPC）"><a href="#3-分布式服务（RPC）" class="headerlink" title="3. 分布式服务（RPC）"></a>3. 分布式服务（RPC）</h2><h3 id="3-1-Dubbo-的实现过程？"><a href="#3-1-Dubbo-的实现过程？" class="headerlink" title="3.1. Dubbo 的实现过程？"></a>3.1. Dubbo 的实现过程？</h3><p><img src="http://oss.fansl.com.cn/image/blog/yuque/Fmn6_y6mwWypJCAp58GOlvNo3nRV.png"><br>节点角色：</p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><blockquote><p>调用关系：</p><ol><li>务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol></blockquote><h3 id="3-2-Dubbo-负载均衡策略有哪些？"><a href="#3-2-Dubbo-负载均衡策略有哪些？" class="headerlink" title="3.2. Dubbo 负载均衡策略有哪些？"></a>3.2. Dubbo 负载均衡策略有哪些？</h3><h4 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h4><blockquote><ul><li>随机，按权重设置随机概率。</li><li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li></ul></blockquote><h4 id="RoundRobin"><a href="#RoundRobin" class="headerlink" title="RoundRobin"></a>RoundRobin</h4><blockquote><ul><li>轮循，按公约后的权重设置轮循比率。</li><li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li></ul></blockquote><h4 id="LeastActive"><a href="#LeastActive" class="headerlink" title="LeastActive"></a>LeastActive</h4><blockquote><ul><li>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</li><li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li></ul></blockquote><h4 id="ConsistentHash"><a href="#ConsistentHash" class="headerlink" title="ConsistentHash"></a>ConsistentHash</h4><blockquote><ul><li>一致性 Hash，相同参数的请求总是发到同一提供者。</li><li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li><li>缺省只对第一个参数 Hash，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.arguments&quot; value=&quot;0,1&quot; /&gt;</code></li><li>缺省用 160 份虚拟节点，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.nodes&quot; value=&quot;320&quot; /&gt;</code></li></ul></blockquote><h3 id="3-3-Dubbo-集群容错策略-？"><a href="#3-3-Dubbo-集群容错策略-？" class="headerlink" title="3.3. Dubbo 集群容错策略 ？"></a>3.3. Dubbo 集群容错策略 ？</h3><p><img src="http://oss.fansl.com.cn/image/blog/yuque/FkvGDRs9ilB3rXMu5CzOmJDGQoBq.jpeg"></p><blockquote><ul><li><strong>Failover</strong> - 失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries&#x3D;”2” 来设置重试次数(不含第一次)。</li><li><strong>Failfast</strong> - 快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li><strong>Failsafe</strong> - 失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li><strong>Failback</strong> - 失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li><strong>Forking</strong> - 并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks&#x3D;”2” 来设置最大并行数。</li><li><strong>Broadcast</strong> - 播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</li></ul></blockquote><h3 id="3-4-动态代理策略？"><a href="#3-4-动态代理策略？" class="headerlink" title="3.4. 动态代理策略？"></a>3.4. 动态代理策略？</h3><blockquote><p>Dubbo 作为 RPC 框架，首先要完成的就是跨系统，跨网络的服务调用。消费方与提供方遵循统一的接口定义，消费方调用接口时，Dubbo<br>将其转换成统一格式的数据结构，通过网络传输，提供方根据规则找到接口实现，通过反射完成调用。也就是说，消费方获取的是对远程服务的一个代理(Proxy)，而提供方因为要支持不同的接口实现，需要一个包装层(Wrapper)。调用的过程大概是这样：</p></blockquote><p><img src="http://oss.fansl.com.cn/image/blog/yuque/Fs785EujW6iFhOBnCl65xQi0zYgN.png"></p><blockquote><p>消费方的 Proxy 和提供方的 Wrapper 得以让 Dubbo 构建出复杂、统一的体系。而这种动态代理与包装也是通过基于 SPI 的插件方式实现的，它的接口就是<strong>ProxyFactory</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;javassist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.PROXY_KEY&#125;)</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException;</span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.PROXY_KEY&#125;)</span></span><br><span class="line">    &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ProxyFactory 有两种实现方式，一种是基于 JDK 的代理实现，一种是基于 javassist 的实现。ProxyFactory 接口上定义了@SPI(“javassist”)，默认为 javassist 的实现。</p></blockquote><h3 id="3-5-Dubbo-支持哪些序列化协议？Hessian？Hessian-的数据结构？"><a href="#3-5-Dubbo-支持哪些序列化协议？Hessian？Hessian-的数据结构？" class="headerlink" title="3.5. Dubbo 支持哪些序列化协议？Hessian？Hessian 的数据结构？"></a>3.5. Dubbo 支持哪些序列化协议？Hessian？Hessian 的数据结构？</h3><blockquote><ol><li>dubbo 序列化，阿里尚不成熟的 java 序列化实现。</li><li>hessian2 序列化：hessian 是一种跨语言的高效二进制的序列化方式，但这里实际不是原生的 hessian2 序列化，而是阿里修改过的 hessian lite，它是 dubbo RPC 默认启用的序列化方式。</li><li>json 序列化：目前有两种实现，一种是采用的阿里的 fastjson 库，另一种是采用 dubbo 中自已实现的简单 json 库，一般情况下，json 这种文本序列化性能不如二进制序列化。</li><li>java 序列化：主要是采用 JDK 自带的 java 序列化实现，性能很不理想。</li><li>Kryo 和 FST：Kryo 和 FST 的性能依然普遍优于 hessian 和 dubbo 序列化。</li></ol><p>Hessian 序列化与 Java 默认的序列化区别？<br>Hessian 是一个轻量级的 remoting on http 工具，采用的是 Binary RPC 协议，所以它很适合于发送二进制数据，同时又具有防火墙穿透能力。</p><ol><li>Hessian 支持跨语言串行</li><li>比 java 序列化具有更好的性能和易用性</li><li>支持的语言比较多</li></ol></blockquote><h3 id="3-6-Protoco-Buffer-是什么？"><a href="#3-6-Protoco-Buffer-是什么？" class="headerlink" title="3.6. Protoco Buffer 是什么？"></a>3.6. Protoco Buffer 是什么？</h3><blockquote><p>Protocol Buffer 是 Google 出品的一种轻量 &amp; 高效的结构化数据存储格式，性能比 Json、XML 真的强！太！多！<br>Protocol Buffer 的序列化 &amp; 反序列化简单 &amp; 速度快的原因是：</p><ol><li>编码 &#x2F; 解码 方式简单（只需要简单的数学运算 &#x3D; 位移等等）</li><li>采用 Protocol Buffer 自身的框架代码 和 编译器 共同完成</li></ol><p>Protocol Buffer 的数据压缩效果好（即序列化后的数据量体积小）的原因是：</p><ol><li>采用了独特的编码方式，如 Varint、Zigzag 编码方式等等</li><li>采用 T - L - V 的数据存储方式：减少了分隔符的使用 &amp; 数据存储得紧凑</li></ol></blockquote><h3 id="3-7-注册中心挂了可以继续通信吗？"><a href="#3-7-注册中心挂了可以继续通信吗？" class="headerlink" title="3.7. 注册中心挂了可以继续通信吗？"></a>3.7. 注册中心挂了可以继续通信吗？</h3><blockquote><p>可以。Dubbo 消费者在应用启动时会从注册中心拉取已注册的生产者的地址接口，并缓存在本地。每次调用时，按照本地存储的地址进行调用。</p></blockquote><h3 id="3-8-ZooKeeper-原理是什么？ZooKeeper-有什么用？"><a href="#3-8-ZooKeeper-原理是什么？ZooKeeper-有什么用？" class="headerlink" title="3.8. ZooKeeper 原理是什么？ZooKeeper 有什么用？"></a>3.8. ZooKeeper 原理是什么？ZooKeeper 有什么用？</h3><blockquote><p>ZooKeeper 是一个分布式应用协调系统，已经用到了许多分布式项目中，用来完成统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等工作。</p></blockquote><p><img src="http://oss.fansl.com.cn/image/blog/yuque/Fo1LZj07OkMb2xFOfo4JRM3DVYyM.png"></p><blockquote><ol><li>每个 Server 在内存中存储了一份数据；</li><li>Zookeeper 启动时，将从实例中选举一个 leader（Paxos 协议）；</li><li>Leader 负责处理数据更新等操作（Zab 协议）；</li><li>一个更新操作成功，当且仅当大多数 Server 在内存中成功修改数据。</li></ol></blockquote><h3 id="3-9-Netty-有什么用？NIO-BIO-AIO-有什么用？有什么区别？"><a href="#3-9-Netty-有什么用？NIO-BIO-AIO-有什么用？有什么区别？" class="headerlink" title="3.9. Netty 有什么用？NIO&#x2F;BIO&#x2F;AIO 有什么用？有什么区别？"></a>3.9. Netty 有什么用？NIO&#x2F;BIO&#x2F;AIO 有什么用？有什么区别？</h3><blockquote><p>Netty 是一个“网络通讯框架”。<br>Netty 进行事件处理的流程。<code>Channel</code>是连接的通道，是 ChannelEvent 的产生者，而<code>ChannelPipeline</code>可以理解为 ChannelHandler 的集合。</p></blockquote><p><img src="http://oss.fansl.com.cn/image/blog/yuque/FrLdWFfuWRE7pFrBHGNhLRxuiF_u.png"></p><blockquote><p>IO 的方式通常分为几种：</p><ul><li>同步阻塞的 BIO</li><li>同步非阻塞的 NIO</li><li>异步非阻塞的 AIO</li></ul><p>在使用同步 I&#x2F;O 的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。<br>NIO 基于 Reactor，当 socket 有流可读或可写入 socket<br>时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。<br>与 NIO 不同，当进行读写操作时，只须直接调用 API 的 read 或 write<br>方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入 read<br>方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将 write 方法传递的流写入完毕时，操作系统主动通知应用程序。<br>即可以理解为，read&#x2F;write 方法都是异步的，完成后会主动调用回调函数。</p></blockquote><h3 id="3-10-为什么要进行系统拆分？拆分不用-Dubbo-可以吗？"><a href="#3-10-为什么要进行系统拆分？拆分不用-Dubbo-可以吗？" class="headerlink" title="3.10. 为什么要进行系统拆分？拆分不用 Dubbo 可以吗？"></a>3.10. 为什么要进行系统拆分？拆分不用 Dubbo 可以吗？</h3><blockquote><p>系统拆分从资源角度分为：应用拆分和数据库拆分。<br>从采用的先后顺序可分为：水平扩展、垂直拆分、业务拆分、水平拆分。</p></blockquote><p><img src="http://oss.fansl.com.cn/image/blog/yuque/FjVNzEU73OQdGUsuQ2NS1jwMskQL.jpeg"></p><blockquote><p>是否使用服务依据实际业务场景来决定。<br>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。<br>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p></blockquote><h3 id="3-11-Dubbo-和-Thrift-有什么区别？"><a href="#3-11-Dubbo-和-Thrift-有什么区别？" class="headerlink" title="3.11. Dubbo 和 Thrift 有什么区别？"></a>3.11. Dubbo 和 Thrift 有什么区别？</h3><blockquote><ul><li>Thrift 是跨语言的 RPC 框架。</li><li>Dubbo 支持服务治理，而 Thrift 不支持。</li></ul></blockquote><hr><p>转载面试</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
